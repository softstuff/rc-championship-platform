package rc.championship.practies;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Logger;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.IOProvider;
import org.openide.windows.TopComponent;
import rc.championship.api.model.Decoder;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//rc.championship.practies//Practies//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "PractiesTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "rc.championship.practies.PractiesTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PractiesAction",
        preferredID = "PractiesTopComponent"
)
public final class PractiesTopComponent extends TopComponent implements PropertyChangeListener{

    private Logger log = Logger.getLogger(getClass().getName());
        
    private InstanceContent ic;
    public PractiesTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(getClass(), "CTL_PractiesTopComponent"));
        setToolTipText(NbBundle.getMessage(getClass(), "HINT_PractiesTopComponent"));        
		
        ic = new InstanceContent ();
        associateLookup( new AbstractLookup(ic));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        model = new rc.championship.practies.PractiesPresentationModel();
        decoderComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${allDecoders}");
        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, model, eLProperty, decoderComboBox);
        bindingGroup.addBinding(jComboBoxBinding);
        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, model, org.jdesktop.beansbinding.ELProperty.create("${decoder}"), decoderComboBox, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        decoderComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decoderComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PractiesTopComponent.class, "PractiesTopComponent.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(decoderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(277, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(decoderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(265, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void decoderComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decoderComboBoxActionPerformed

    }//GEN-LAST:event_decoderComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox decoderComboBox;
    private javax.swing.JLabel jLabel1;
    private rc.championship.practies.PractiesPresentationModel model;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        log.info("componentOpened");
        model.addPropertyChangeListener(this);
        if(model.hasDecoder()){
            ic.add(model.getDecoder());
            model.startListsenForDecoderListChanges();
        }
    }


    @Override
    public void componentClosed() {
        model.removePropertyChangeListener(this);
        log.info("componentClosed");
        if(model.hasDecoder()){
            ic.remove(model.getDecoder());
            model.stopListsenForDecoderListChanges();
        }
    }


    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    

    private void log(String format, Object ... args){
        String msg = String.format(format, args);
        IOProvider.getDefault().getIO("Practies", false).getOut().println(msg);
        log.info(msg); 
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if(evt.getPropertyName().equals( PractiesPresentationModel.PROP_DECODER)){
            Decoder oldDecoder = (Decoder)evt.getOldValue();
            Decoder newDecoder = (Decoder)evt.getNewValue();
            if(oldDecoder != null){
                ic.remove(oldDecoder);
            }
            if(newDecoder != null){
                ic.add(newDecoder);
            }
        }
    }
    
    

    
    
}
