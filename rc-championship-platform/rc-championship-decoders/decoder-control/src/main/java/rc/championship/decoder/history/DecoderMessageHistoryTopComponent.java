package rc.championship.decoder.history;

import java.awt.BorderLayout;
import java.io.IOException;
import java.net.URL;
import java.util.logging.Logger;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.paint.Color;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//rc.championship.decoder.history//DecoderMessageHistory//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "DecoderMessageHistoryTopComponent",
        iconBase = "rc/championship/decoder/history/database.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "rc.championship.decoder.history.DecoderMessageHistoryTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_DecoderMessageHistoryAction",
        preferredID = "DecoderMessageHistoryTopComponent"
)
@Messages({
    "CTL_DecoderMessageHistoryAction=DecoderMessageHistory",
    "CTL_DecoderMessageHistoryTopComponent=DecoderMessageHistory Window",
    "HINT_DecoderMessageHistoryTopComponent=This is a DecoderMessageHistory window"
})
public final class DecoderMessageHistoryTopComponent extends TopComponent {

    private final Logger log = Logger.getLogger(getClass().getName());
    
    private JFXPanel fxPanel;
    private MessageHistoryViewController fxController;
    
    public DecoderMessageHistoryTopComponent() {
        initComponents();
        setName(Bundle.CTL_DecoderMessageHistoryTopComponent());
        setToolTipText(Bundle.HINT_DecoderMessageHistoryTopComponent());
        init();
    }
    
    private void init() {
        fxPanel = new JFXPanel();
        add(fxPanel, BorderLayout.CENTER);
        Platform.setImplicitExit(false);
        Platform.runLater(()-> createScene());
    }
    
    
    private void createScene() {
        try {
            URL location = getClass().getResource("message-history.fxml");
            FXMLLoader loader = new FXMLLoader(location);
            Parent root = (Parent) loader.load();
            fxController = loader.getController();
//            Scene scene = new Scene(root);
//            Stage newStage = new Stage();
//            newStage.setScene(newScene);
//            newStage.show();
            
//            FXMLLoader fxmlLoader = new FXMLLoader();
//            fxmlLoader.setLocation(location);
//            fxmlLoader.setBuilderFactory(new JavaFXBuilderFactory());
//            
//            Parent root = fxmlLoader.load(location);
            Scene scene = new Scene(root, Color.LIGHTBLUE);
            fxPanel.setScene(scene);
//            fxController = fxmlLoader.getController();
        } catch(IOException ex){
            Exceptions.printStackTrace(ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
