package rc.championship.decoder.options;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.prefs.BackingStoreException;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableColumn;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import rc.championship.api.model.Decoder;
import rc.championship.api.services.decoder.DecoderConnectionFactory;
import rc.championship.api.services.decoder.DecoderServices;
import rc.championship.api.ui.BeanTableModel;

final class DecodersPanel extends javax.swing.JPanel {

    private final DecodersOptionsPanelController controller;
    
    private final DecoderServices decoderServices;
    private final BeanTableModel<Decoder> tableModel;
    private Decoder selected;
    
    private PropertyChangeListener changeDetector = new PropertyChangeListener() {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            controller.changed();
        }
    };

    DecodersPanel(DecodersOptionsPanelController controller) {
        this.controller = controller;
        this.tableModel = new BeanTableModel(Decoder.class);
        tableModel.addColumn("Host", "host", BeanTableModel.EditMode.EDITABLE);
        tableModel.addColumn("Port", "port", BeanTableModel.EditMode.EDITABLE);
        tableModel.addColumn("Decoder", "decoderName", BeanTableModel.EditMode.EDITABLE);
        tableModel.addColumn("Connector", "connectorFactory", BeanTableModel.EditMode.NON_EDITABLE);
        
        
        initComponents();
        decoderServices = Lookup.getDefault().lookup(DecoderServices.class);
        
        decoderTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if(decoderTable.getSelectedRow() == -1){
                    selected = null;
                } else {
                    if(selected != null){
                        selected.removePropertyChangeListener(changeDetector);
                    }
                    selected = tableModel.getRow(decoderTable.getSelectedRow());
                    selected.addPropertyChangeListener(changeDetector);
                }
            }
        });
        
        JComboBox comboBox = new JComboBox();
        Collection<? extends DecoderConnectionFactory> factories = Lookup.getDefault().lookupAll(DecoderConnectionFactory.class);
        factories.forEach(factory-> comboBox.addItem(factory.getDecoderName()));
        
        TableColumn decoderColumn = decoderTable.getColumnModel().getColumn(2);
        decoderColumn.setCellEditor(new DefaultCellEditor(comboBox));
                
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        decoderTable = new javax.swing.JTable();
        addNewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        decoderTable.setModel(tableModel);
        jScrollPane1.setViewportView(decoderTable);

        org.openide.awt.Mnemonics.setLocalizedText(addNewButton, org.openide.util.NbBundle.getMessage(DecodersPanel.class, "DecodersPanel.addNewButton.text")); // NOI18N
        addNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(deleteButton, org.openide.util.NbBundle.getMessage(DecodersPanel.class, "DecodersPanel.deleteButton.text")); // NOI18N
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addNewButton)
                    .addComponent(deleteButton))
                .addContainerGap(162, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addNewButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(353, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addNewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewButtonActionPerformed
        
        selected = new Decoder("", 5403, "", Optional.empty(), UUID.randomUUID().toString());
        tableModel.addRow(selected);
        controller.changed();
        decoderTable.invalidate();
        
    }//GEN-LAST:event_addNewButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
       
        if(selected != null){
            tableModel.removeRow(selected);
            controller.changed();
            decoderTable.invalidate();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    void load() {
        
        try {
            List<Decoder> decoders  = decoderServices.getDecoders();
            tableModel.clearRows();
            tableModel.addRows(decoders);
            decoderTable.invalidate();
            
            // TODO read settings and initialize GUI
            // Example:
            // someCheckBox.setSelected(Preferences.userNodeForPackage(DecodersPanel.class).getBoolean("someFlag", false));
            // or for org.openide.util with API spec. version >= 7.4:
            // someCheckBox.setSelected(NbPreferences.forModule(DecodersPanel.class).getBoolean("someFlag", false));
            // or:
            // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
        } catch (BackingStoreException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    void store() {
        
        try {
            List<Decoder> decoders = tableModel.getRows();
            decoderServices.store(decoders);
            // TODO store modified settings
            // Example:
            // Preferences.userNodeForPackage(DecodersPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
            // or for org.openide.util with API spec. version >= 7.4:
            // NbPreferences.forModule(DecodersPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
            // or:
            // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
        } catch (BackingStoreException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    public Decoder getSelected() {
        return selected;
    }

    public void setSelected(Decoder selected) {
        this.selected = selected;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewButton;
    private javax.swing.JTable decoderTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
